{"ast":null,"code":"var _jsxFileName = \"/home/bognar/\\xC1rea de Trabalho/t10101010/frontend-assesment/frontend/src/pages/DeckId/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles.css';\n\nfunction DeckId() {\n  const [pileSuit, setPileSuit] = useState([]);\n  const [pileValues, setPileValues] = useState([]);\n  const [pileSuitSorted, setPileSuitSorted] = useState([]);\n  const [pileValueSorted, setPileValueSorted] = useState([]);\n  useEffect(() => {\n    axios({\n      method: 'get',\n      url: `https://deckofcardsapi.com/api/deck/${localStorage.getItem('deck_id')}/draw/?count=11`\n    }).then(response => {\n      const suits = response.data.cards.map(card => card.suit);\n      setPileSuit(suits);\n      const values = response.data.cards.map(card => card.value);\n      setPileValues(values);\n    });\n  }, []);\n  useEffect(() => {\n    // input de cartas\n    const pile_naipe = pileSuit.map(card => card);\n    const pile_values = pileValues.map(card => card); // ordem proposta\n\n    const naipes = ['HEARTS', 'DIAMONTS', 'CLUBS', 'SPADES'];\n    const valores = ['2', 'ACE', 'KING', 'QUEEN', 'JACK', '10', '9', '8', '7', '6', '5', '4', '3']; // carta de rotacao\n\n    const rotationCardValor = '2';\n    const rotationCardNaipe = 'HEARTS'; // dividir as array e passar quem ta na frente da rotation card pra trás\n\n    var i = 0;\n    var j = 0; // criando nova array de naipes, com base na carta de rotacao\n\n    const naipesOrder = [];\n\n    for (i = 0; i < 4; i++) {\n      if (naipes[i] === rotationCardNaipe) {\n        for (j = 0; j < i; j++) {\n          naipesOrder[j] = naipes[i];\n          if (i < 4) i++;\n        }\n      }\n    }\n\n    j = 0;\n\n    for (i = 0; i < 4; i++) {\n      if (naipesOrder[i] === undefined) {\n        naipesOrder[i] = naipes[j];\n        j++;\n      }\n    } // criando nova array de valores, com base na carta de rotacao\n\n\n    const valuesOrder = [];\n\n    for (i = 0; i < 13; i++) {\n      if (valores[i] === rotationCardValor) {\n        for (j = 0; j < i; j++) {\n          valuesOrder[j] = valores[i];\n          if (i < 13) i++;\n        }\n      }\n    }\n\n    j = 0;\n\n    for (i = 0; i < 13; i++) {\n      if (valuesOrder[i] === undefined) {\n        valuesOrder[i] = valores[j];\n        j++;\n      }\n    } // Ordenando as pilhas de cartas com base na carta de rotação\n\n\n    const pile_naipe_ordenados = [];\n    const pile_values_ordenados = [];\n    var n = 0; // ordenando os naipes\n\n    for (j = 0; j < 4; j++) {\n      for (i = 0; i < 13; i++) {\n        if (pile_naipe[i] === naipesOrder[j]) {\n          pile_naipe_ordenados[n] = pile_naipe[i];\n          pile_values_ordenados[n] = pile_values[i];\n          n++;\n        }\n      }\n    } // ordenando os valores\n\n\n    var aux;\n\n    for (i = 0; i < n - 1; i++) {\n      if (pile_naipe_ordenados[i] === pile_naipe_ordenados[i + 1]) {\n        if (valuesOrder.indexOf(pile_values_ordenados[i]) > valuesOrder.indexOf(pile_values_ordenados[i + 1])) {\n          aux = pile_values_ordenados[i];\n          pile_values_ordenados[i] = pile_values_ordenados[i + 1];\n          pile_values_ordenados[i + 1] = aux;\n        }\n      }\n    } // imprime a string\n\n    /*\n    for (i=0; i<n; i++) {\n      console.log(i + ':' + pile_naipe_ordenados[i] + '-' + pile_values_ordenados[i] );\n    }\n    */\n\n\n    setPileSuitSorted(pile_naipe_ordenados);\n    setPileValueSorted(pile_values_ordenados);\n  }, [pileValues, pileSuit]); // full house combinacoes\n\n  useEffect(() => {\n    //console.log(pileValueSorted);\n    //console.log(pileSuitSorted);\n    const inputValue = ['2', '2', '2', '2', '4', '4', '4'];\n    const inputSuit = ['H', 'D', 'C', 'S', 'H', 'D', 'C'];\n    const valores = [];\n    const ocorrencias = [];\n    var indexValores = 0;\n    var indexOcorrencias = 0;\n    valores[indexValores] = inputValue[0];\n    indexValores++;\n    ocorrencias[0] = 1;\n    var i;\n\n    for (i = 0; i < inputValue.length - 1; i++) {\n      if (inputValue[i] !== inputValue[i + 1]) {\n        valores[indexValores] = inputValue[i + 1];\n        indexValores++;\n        indexOcorrencias++;\n        ocorrencias[indexOcorrencias] = 1;\n      } else {\n        ocorrencias[indexOcorrencias]++;\n      }\n    } //  console.log(valores);\n    //  console.log(ocorrencias);\n\n\n    var j;\n    var k;\n    var indicesCertos = [];\n    var indexTrios = 0;\n    let trios = [[]]; // buscando pelos trios\n\n    for (i = 0; i < ocorrencias.length; i++) {\n      // salvo os trios quando tem 3 cartas de mesmo valor\n      if (ocorrencias[i] === 3) {\n        indicesCertos = [];\n        k = 0;\n\n        for (j = 0; j < inputValue.length; j++) {\n          if (inputValue[j] === valores[i]) {\n            indicesCertos[k] = j;\n            k++;\n          }\n        }\n\n        trios[indexTrios] = [inputValue[indicesCertos[0]] + inputSuit[indicesCertos[0]], inputValue[indicesCertos[1]] + inputSuit[indicesCertos[1]], inputValue[indicesCertos[2]] + inputSuit[indicesCertos[2]]];\n        indexTrios++;\n      } // se eu tiver 4 cartas de naipes diferentes, tenho 4 combinaçoes de trios possíveis\n      // entao 'ignoro' cada um das cartas, para obter os 4 trios\n\n\n      if (ocorrencias[i] === 4) {\n        indicesCertos = [];\n        k = 0;\n\n        for (j = 0; j < inputValue.length; j++) {\n          if (inputValue[j] === valores[i]) {\n            indicesCertos[k] = j;\n            k++;\n          }\n        }\n\n        trios[indexTrios] = [inputValue[indicesCertos[0]] + inputSuit[indicesCertos[0]], inputValue[indicesCertos[1]] + inputSuit[indicesCertos[1]], inputValue[indicesCertos[2]] + inputSuit[indicesCertos[2]]];\n        indexTrios++;\n        trios[indexTrios] = [inputValue[indicesCertos[0]] + inputSuit[indicesCertos[0]], inputValue[indicesCertos[1]] + inputSuit[indicesCertos[1]], inputValue[indicesCertos[3]] + inputSuit[indicesCertos[3]]];\n        indexTrios++;\n        trios[indexTrios] = [inputValue[indicesCertos[0]] + inputSuit[indicesCertos[0]], inputValue[indicesCertos[2]] + inputSuit[indicesCertos[2]], inputValue[indicesCertos[3]] + inputSuit[indicesCertos[3]]];\n        indexTrios++;\n        trios[indexTrios] = [inputValue[indicesCertos[1]] + inputSuit[indicesCertos[1]], inputValue[indicesCertos[2]] + inputSuit[indicesCertos[2]], inputValue[indicesCertos[3]] + inputSuit[indicesCertos[3]]];\n        indexTrios++;\n      }\n    } //console.log(trios);\n\n\n    let duplas = [[]];\n    var indexDuplas = 0; // buscando pelas duplas \n\n    for (var l = 0; l < inputValue.length; l++) {\n      for (var m = 1; m < inputValue.length - 1; m++) {\n        if (l < m) {\n          // se o valor das duas cartas fores iguais, porem o naipe diferente (para nao pegar duas vezes a mesma carta)\n          if (inputValue[l] === inputValue[m]) {\n            duplas[indexDuplas] = [inputValue[m] + inputSuit[m], inputValue[l] + inputSuit[l]];\n            indexDuplas++;\n          }\n        }\n      }\n    }\n\n    console.log(duplas);\n    /*\n    var index=0;\n    let trios = [[]];\n     \n    // buscando pelos trios\n    \n    if (inputValue.length >= 5) {\n       // busco pelos trios\n      for (var k = 0; k<inputValue.length; k++) {       \n        for (var j = 1; j<(inputValue.length-1); j++) {  \n          for (var i=2; i<(inputValue.length-2); i++) {\n                  // se o valor das tres cartas fores iguais, porem o naipe diferente (para nao pegar duas vezes a mesma carta)\n                if ( (inputValue[k] === inputValue[j]) && (inputValue[k] === inputValue[i]) &&  \n                     (inputSuit[k] !== inputSuit[j]) && (inputSuit[k] !== inputSuit[i]) && (inputSuit[i] !== inputSuit[j]) ){\n                       // se em algum linha de cima, eu ja tiver adiconado os dois valores anteriores em qq posicao, nao adicono o proximo\n                      // para nao ter linhas repetidas, com posicoes alternadas\n                      // como faço isso?\n                        \n                       trios[index] = [inputValue[k]+inputSuit[k],inputValue[j]+inputSuit[j],inputValue[i]+inputSuit[i]];\n                      index++;\n                  \n                }\n               \n              \n          }  \n        }\n      }\n      console.log(trios);\n       // buscando pelas duplas\n     \n     \n    } \n    */\n    // combinacoes de duplas\n  }, [pileValues, pileSuit]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"deckid-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }\n  }, \"Ordered Pile\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }\n  }, pileValueSorted.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 15\n    }\n  }, \"Card \", index + 1, \":  \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 15\n    }\n  }, value, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }\n  }, pileSuitSorted.map((suit, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index + 1000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 15\n    }\n  }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 15\n    }\n  }, suit, \" \"))))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }\n  }, \"Rotation card: \"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }\n  }, \"High card: \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }\n  }, \" \", pileValueSorted[0], \" \", pileSuitSorted[0], \" \"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }\n  }, \"Full house combination: none\"));\n}\n\nexport default DeckId;","map":{"version":3,"sources":["/home/bognar/Área de Trabalho/t10101010/frontend-assesment/frontend/src/pages/DeckId/index.js"],"names":["React","useState","useEffect","axios","DeckId","pileSuit","setPileSuit","pileValues","setPileValues","pileSuitSorted","setPileSuitSorted","pileValueSorted","setPileValueSorted","method","url","localStorage","getItem","then","response","suits","data","cards","map","card","suit","values","value","pile_naipe","pile_values","naipes","valores","rotationCardValor","rotationCardNaipe","i","j","naipesOrder","undefined","valuesOrder","pile_naipe_ordenados","pile_values_ordenados","n","aux","indexOf","inputValue","inputSuit","ocorrencias","indexValores","indexOcorrencias","length","k","indicesCertos","indexTrios","trios","duplas","indexDuplas","l","m","console","log","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport axios from 'axios';\n\nimport './styles.css';\n\nfunction DeckId() {\n\n  const [pileSuit, setPileSuit] = useState([]);\n  const [pileValues, setPileValues] = useState([]);\n  \n  const [pileSuitSorted, setPileSuitSorted] = useState([]);\n  const [pileValueSorted, setPileValueSorted] = useState([]);\n\n\n  useEffect(() => {\n    axios({\n      method: 'get',\n      url: `https://deckofcardsapi.com/api/deck/${localStorage.getItem('deck_id')}/draw/?count=11`\n    })\n    .then (response => {\n      \n      const suits = response.data.cards.map(card => card.suit);\n      setPileSuit(suits);\n\n      const values = response.data.cards.map(card => card.value);\n      setPileValues(values);\n\n    });\n  },[]);\n\n\n\n\n  useEffect(() => {\n   \n  // input de cartas\n  const pile_naipe = pileSuit.map(card => card);\n  const pile_values = pileValues.map(card => card); \n\n\n  // ordem proposta\n  const naipes = ['HEARTS', 'DIAMONTS', 'CLUBS', 'SPADES'];\n  const valores = ['2', 'ACE', 'KING', 'QUEEN', 'JACK', '10', '9', '8', '7', '6', '5', '4', '3'];\n\n\n  // carta de rotacao\n  const rotationCardValor = '2';\n  const rotationCardNaipe = 'HEARTS';\n\n  // dividir as array e passar quem ta na frente da rotation card pra trás\n  \n  var i = 0;\n  var j = 0;\n  \n\n  // criando nova array de naipes, com base na carta de rotacao\n  const naipesOrder =[];\n\n  for (i=0; i<4; i++) {\n    if (naipes[i] === rotationCardNaipe) {\n      for (j=0; j<i; j++) {\n        naipesOrder[j] = naipes[i];\n        if (i<4) i++;\n      }\n    }\n  }\n\n  j = 0;\n\n  for (i=0; i<4; i++) {\n    if (naipesOrder[i] === undefined) {\n      naipesOrder[i] = naipes[j];\n      j++;\n    }\n  }\n\n\n\n  // criando nova array de valores, com base na carta de rotacao\n  \n  const valuesOrder =[];\n\n  for (i=0; i<13; i++) {\n    if (valores[i] === rotationCardValor) {\n      for (j=0; j<i; j++) {\n        valuesOrder[j] = valores[i];\n        if (i<13) i++;\n      }\n    }\n  }\n\n  j = 0;\n\n  for (i=0; i<13; i++) {\n    if (valuesOrder[i] === undefined) {\n      valuesOrder[i] = valores[j];\n      j++;\n    }\n  }\n\n\n\n\n  // Ordenando as pilhas de cartas com base na carta de rotação\n\n  const pile_naipe_ordenados = [];\n  const pile_values_ordenados = [];\n  \n\n  var n = 0;\n\n  // ordenando os naipes\n  for (j=0; j<4; j++) {\n    for (i=0; i<13; i++) {\n      if ( pile_naipe[i] === naipesOrder[j] ) {\n        pile_naipe_ordenados[n] = pile_naipe[i];\n        pile_values_ordenados[n] = pile_values[i];\n        n++;\n      }\n    }\n  }\n\n\n  // ordenando os valores\n  var aux;\n  for( i=0; i<n-1; i++) {\n\n    if (pile_naipe_ordenados[i] === pile_naipe_ordenados[i+1]) {\n  \n      if ( valuesOrder.indexOf(pile_values_ordenados[i])  > valuesOrder.indexOf(pile_values_ordenados[i+1]) ) {\n        \n        aux = pile_values_ordenados[i];\n        pile_values_ordenados[i] = pile_values_ordenados[i+1];\n        pile_values_ordenados[i+1] = aux;\n      }\n    }\n  }\n  \n  // imprime a string\n\n  /*\n  for (i=0; i<n; i++) {\n    console.log(i + ':' + pile_naipe_ordenados[i] + '-' + pile_values_ordenados[i] );\n  }\n  */\n\n  setPileSuitSorted(pile_naipe_ordenados);\n  setPileValueSorted(pile_values_ordenados);\n\n\n},[pileValues, pileSuit]);\n\n\n\n\n// full house combinacoes\nuseEffect(() => {\n  //console.log(pileValueSorted);\n  //console.log(pileSuitSorted);\n  \n  const inputValue = ['2', '2', '2', '2', '4', '4', '4'];\n  const inputSuit = [ 'H', 'D', 'C', 'S', 'H', 'D', 'C'];\n\n  const valores = [];\n  const ocorrencias = [];\n  var indexValores = 0;\n  var indexOcorrencias = 0;\n\n  valores[indexValores] = inputValue[0];\n  indexValores++;\n\n  ocorrencias[0] = 1;\n\n  var i;\n\n  for ( i=0; i<inputValue.length-1; i++) {\n    if (inputValue[i] !== inputValue[i+1]) {\n      valores[indexValores] = inputValue[i+1];\n      indexValores++;\n      indexOcorrencias++\n      ocorrencias[indexOcorrencias] = 1;\n    } else {\n      ocorrencias[indexOcorrencias]++;\n    }\n  }\n\n//  console.log(valores);\n//  console.log(ocorrencias);\n  \n\n  var j;\n  var k;\n  var indicesCertos = [];\n      \n\n  var indexTrios = 0;\n  let trios = [[]];\n\n\n  // buscando pelos trios\n  for ( i=0; i<ocorrencias.length; i++) {\n    \n    // salvo os trios quando tem 3 cartas de mesmo valor\n    if(ocorrencias[i] === 3){\n    \n      indicesCertos = [];\n      k=0;\n      \n      for ( j=0; j<inputValue.length; j++ ) {\n        if ( inputValue[j] === valores[i] ) {\n\n          indicesCertos[k] = j;\n          k++;\n        }\n      }\n      \n      trios[indexTrios] = [inputValue[indicesCertos[0]]+inputSuit[indicesCertos[0]],inputValue[indicesCertos[1]]+inputSuit[indicesCertos[1]],inputValue[indicesCertos[2]]+inputSuit[indicesCertos[2]]];\n      indexTrios++;\n      \n    }\n\n\n    // se eu tiver 4 cartas de naipes diferentes, tenho 4 combinaçoes de trios possíveis\n    // entao 'ignoro' cada um das cartas, para obter os 4 trios\n\n    if(ocorrencias[i] === 4){\n      \n      indicesCertos = [];\n      k=0;\n      \n      for ( j=0; j<inputValue.length; j++ ) {\n        if ( inputValue[j] === valores[i] ) {\n\n          indicesCertos[k] = j;\n          k++;\n        }\n      }  \n\n      \n      trios[indexTrios] = [inputValue[indicesCertos[0]]+inputSuit[indicesCertos[0]],inputValue[indicesCertos[1]]+inputSuit[indicesCertos[1]],inputValue[indicesCertos[2]]+inputSuit[indicesCertos[2]]];\n      indexTrios++;\n      \n      trios[indexTrios] = [inputValue[indicesCertos[0]]+inputSuit[indicesCertos[0]],inputValue[indicesCertos[1]]+inputSuit[indicesCertos[1]],inputValue[indicesCertos[3]]+inputSuit[indicesCertos[3]]];\n      indexTrios++;\n      \n      trios[indexTrios] = [inputValue[indicesCertos[0]]+inputSuit[indicesCertos[0]],inputValue[indicesCertos[2]]+inputSuit[indicesCertos[2]],inputValue[indicesCertos[3]]+inputSuit[indicesCertos[3]]];\n      indexTrios++;\n      \n      trios[indexTrios] = [inputValue[indicesCertos[1]]+inputSuit[indicesCertos[1]],inputValue[indicesCertos[2]]+inputSuit[indicesCertos[2]],inputValue[indicesCertos[3]]+inputSuit[indicesCertos[3]]];\n      indexTrios++;\n\n    }\n  }\n\n  //console.log(trios);\n\n\n  let duplas = [[]];\n  var indexDuplas = 0;\n\n\n  // buscando pelas duplas \n  for (var l = 0; l<inputValue.length; l++) {       \n    for (var m = 1; m<(inputValue.length-1); m++) {  \n      if (l<m) {\n\n        // se o valor das duas cartas fores iguais, porem o naipe diferente (para nao pegar duas vezes a mesma carta)\n        if ( (inputValue[l] === inputValue[m]) ) {\n          \n          duplas[indexDuplas] = [ inputValue[m]+inputSuit[m] , inputValue[l]+inputSuit[l] ];\n          indexDuplas++;\n              \n        }\n      }      \n    }\n  }\n\n  console.log(duplas);\n  \n\n  \n\n\n  /*\n  var index=0;\n  let trios = [[]];\n\n  \n  // buscando pelos trios\n  \n  if (inputValue.length >= 5) {\n\n    // busco pelos trios\n    for (var k = 0; k<inputValue.length; k++) {       \n      for (var j = 1; j<(inputValue.length-1); j++) {  \n        for (var i=2; i<(inputValue.length-2); i++) {\n\n\n              // se o valor das tres cartas fores iguais, porem o naipe diferente (para nao pegar duas vezes a mesma carta)\n              if ( (inputValue[k] === inputValue[j]) && (inputValue[k] === inputValue[i]) &&  \n                   (inputSuit[k] !== inputSuit[j]) && (inputSuit[k] !== inputSuit[i]) && (inputSuit[i] !== inputSuit[j]) ){\n\n                    // se em algum linha de cima, eu ja tiver adiconado os dois valores anteriores em qq posicao, nao adicono o proximo\n                    // para nao ter linhas repetidas, com posicoes alternadas\n                    // como faço isso?\n\n\n                    \n\n                    trios[index] = [inputValue[k]+inputSuit[k],inputValue[j]+inputSuit[j],inputValue[i]+inputSuit[i]];\n                    index++;\n\n\n              \n              }\n\n            \n            \n        }  \n      }\n    }\n    console.log(trios);\n\n    // buscando pelas duplas\n   \n\n  \n  } \n  */\n\n  // combinacoes de duplas\n\n\n   \n\n},[pileValues, pileSuit]);\n\n\n\n\n\n  return (\n    <div className=\"deckid-container\">\n\n\n      <h1>Ordered Pile</h1>\n      \n      <div className=\"cards\">\n\n        <div>\n        {pileValueSorted.map(( value, index )=> (\n          <div key={index} >\n              <span>Card {index+1}:  </span>\n              <span>{value} </span>\n          </div>\n        ))}\n\n        </div>\n\n        <div>\n        {pileSuitSorted.map(( suit, index )=> (\n          <div key={index+1000}>\n              <span>&nbsp;</span>\n              <span>{suit} </span>\n          </div>\n        ))}\n        </div>\n\n      </div>\n\n\n\n      <h2>Rotation card: </h2>\n      \n\n      <h2>High card: </h2>\n      <span> {pileValueSorted[0]} {pileSuitSorted[0]} </span>\n      \n\n      <h2>Full house combination: none</h2>\n      \n    </div>\n  );\n}\n\nexport default DeckId;"]},"metadata":{},"sourceType":"module"}