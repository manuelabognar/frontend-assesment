{"ast":null,"code":"var _jsxFileName = \"/home/bognar/\\xC1rea de Trabalho/t10101010/frontend-assesment/frontend/src/pages/DeckId/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles.css';\n\nfunction DeckId() {\n  const [pileSuit, setPileSuit] = useState([]);\n  const [pileValues, setPileValues] = useState([]);\n  const [pileSuitSorted, setPileSuitSorted] = useState([]);\n  const [pileValueSorted, setPileValueSorted] = useState([]);\n  useEffect(() => {\n    axios({\n      method: 'get',\n      url: `https://deckofcardsapi.com/api/deck/${localStorage.getItem('deck_id')}/draw/?count=11`\n    }).then(response => {\n      const suits = response.data.cards.map(card => card.suit);\n      setPileSuit(suits);\n      const values = response.data.cards.map(card => card.value);\n      setPileValues(values);\n    });\n  }, []);\n  useEffect(() => {\n    // input de cartas\n    const pile_naipe = pileSuit.map(card => card);\n    const pile_values = pileValues.map(card => card); // ordem proposta\n\n    const naipes = ['HEARTS', 'DIAMONTS', 'CLUBS', 'SPADES'];\n    const valores = ['2', 'ACE', 'KING', 'QUEEN', 'JACK', '10', '9', '8', '7', '6', '5', '4', '3']; // carta de rotacao\n\n    const rotationCardValor = '2';\n    const rotationCardNaipe = 'HEARTS'; // dividir as array e passar quem ta na frente da rotation card pra trás\n\n    var i = 0;\n    var j = 0; // criando nova array de naipes, com base na carta de rotacao\n\n    const naipesOrder = [];\n\n    for (i = 0; i < 4; i++) {\n      if (naipes[i] === rotationCardNaipe) {\n        for (j = 0; j < i; j++) {\n          naipesOrder[j] = naipes[i];\n          if (i < 4) i++;\n        }\n      }\n    }\n\n    j = 0;\n\n    for (i = 0; i < 4; i++) {\n      if (naipesOrder[i] === undefined) {\n        naipesOrder[i] = naipes[j];\n        j++;\n      }\n    } // criando nova array de valores, com base na carta de rotacao\n\n\n    const valuesOrder = [];\n\n    for (i = 0; i < 13; i++) {\n      if (valores[i] === rotationCardValor) {\n        for (j = 0; j < i; j++) {\n          valuesOrder[j] = valores[i];\n          if (i < 13) i++;\n        }\n      }\n    }\n\n    j = 0;\n\n    for (i = 0; i < 13; i++) {\n      if (valuesOrder[i] === undefined) {\n        valuesOrder[i] = valores[j];\n        j++;\n      }\n    } // Ordenando as pilhas de cartas com base na carta de rotação\n\n\n    const pile_naipe_ordenados = [];\n    const pile_values_ordenados = [];\n    var n = 0; // ordenando os naipes\n\n    for (j = 0; j < 4; j++) {\n      for (i = 0; i < 13; i++) {\n        if (pile_naipe[i] === naipesOrder[j]) {\n          pile_naipe_ordenados[n] = pile_naipe[i];\n          pile_values_ordenados[n] = pile_values[i];\n          n++;\n        }\n      }\n    } // ordenando os valores\n\n\n    var aux;\n\n    for (i = 0; i < n - 1; i++) {\n      if (pile_naipe_ordenados[i] === pile_naipe_ordenados[i + 1]) {\n        if (valuesOrder.indexOf(pile_values_ordenados[i]) > valuesOrder.indexOf(pile_values_ordenados[i + 1])) {\n          aux = pile_values_ordenados[i];\n          pile_values_ordenados[i] = pile_values_ordenados[i + 1];\n          pile_values_ordenados[i + 1] = aux;\n        }\n      }\n    } // imprime a string\n\n    /*\n    for (i=0; i<n; i++) {\n      console.log(i + ':' + pile_naipe_ordenados[i] + '-' + pile_values_ordenados[i] );\n    }\n    */\n\n\n    setPileSuitSorted(pile_naipe_ordenados);\n    setPileValueSorted(pile_values_ordenados);\n  }, [pileValues, pileSuit]); // full house combinacoes\n\n  useEffect(() => {\n    //console.log(pileValueSorted);\n    //console.log(pileSuitSorted);\n    const inputValue = ['2', '2', '2', '2', '3', '3', '3'];\n    const inputSuit = ['H', 'D', 'C', 'S', 'H'];\n\n    if (inputSuit.length >= 5) {\n      alert('oi');\n    }\n  }, [pileValues, pileSuit]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"deckid-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, \"Ordered Pile\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, pileValueSorted.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, \"Card \", index + 1, \":  \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 15\n    }\n  }, value, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, pileSuitSorted.map((suit, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index + 1000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 15\n    }\n  }, suit, \" \"))))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, \"Rotation card: \"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, \"High card: \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, \" \", pileValueSorted[0], \" \", pileSuitSorted[0], \" \"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }, \"Full house combination: none\"));\n}\n\nexport default DeckId;","map":{"version":3,"sources":["/home/bognar/Área de Trabalho/t10101010/frontend-assesment/frontend/src/pages/DeckId/index.js"],"names":["React","useState","useEffect","axios","DeckId","pileSuit","setPileSuit","pileValues","setPileValues","pileSuitSorted","setPileSuitSorted","pileValueSorted","setPileValueSorted","method","url","localStorage","getItem","then","response","suits","data","cards","map","card","suit","values","value","pile_naipe","pile_values","naipes","valores","rotationCardValor","rotationCardNaipe","i","j","naipesOrder","undefined","valuesOrder","pile_naipe_ordenados","pile_values_ordenados","n","aux","indexOf","inputValue","inputSuit","length","alert","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport axios from 'axios';\n\nimport './styles.css';\n\nfunction DeckId() {\n\n  const [pileSuit, setPileSuit] = useState([]);\n  const [pileValues, setPileValues] = useState([]);\n  \n  const [pileSuitSorted, setPileSuitSorted] = useState([]);\n  const [pileValueSorted, setPileValueSorted] = useState([]);\n\n\n  useEffect(() => {\n    axios({\n      method: 'get',\n      url: `https://deckofcardsapi.com/api/deck/${localStorage.getItem('deck_id')}/draw/?count=11`\n    })\n    .then (response => {\n      \n      const suits = response.data.cards.map(card => card.suit);\n      setPileSuit(suits);\n\n      const values = response.data.cards.map(card => card.value);\n      setPileValues(values);\n\n    });\n  },[]);\n\n\n\n\n  useEffect(() => {\n   \n  // input de cartas\n  const pile_naipe = pileSuit.map(card => card);\n  const pile_values = pileValues.map(card => card); \n\n\n  // ordem proposta\n  const naipes = ['HEARTS', 'DIAMONTS', 'CLUBS', 'SPADES'];\n  const valores = ['2', 'ACE', 'KING', 'QUEEN', 'JACK', '10', '9', '8', '7', '6', '5', '4', '3'];\n\n\n  // carta de rotacao\n  const rotationCardValor = '2';\n  const rotationCardNaipe = 'HEARTS';\n\n  // dividir as array e passar quem ta na frente da rotation card pra trás\n  \n  var i = 0;\n  var j = 0;\n  \n\n  // criando nova array de naipes, com base na carta de rotacao\n  const naipesOrder =[];\n\n  for (i=0; i<4; i++) {\n    if (naipes[i] === rotationCardNaipe) {\n      for (j=0; j<i; j++) {\n        naipesOrder[j] = naipes[i];\n        if (i<4) i++;\n      }\n    }\n  }\n\n  j = 0;\n\n  for (i=0; i<4; i++) {\n    if (naipesOrder[i] === undefined) {\n      naipesOrder[i] = naipes[j];\n      j++;\n    }\n  }\n\n\n\n  // criando nova array de valores, com base na carta de rotacao\n  \n  const valuesOrder =[];\n\n  for (i=0; i<13; i++) {\n    if (valores[i] === rotationCardValor) {\n      for (j=0; j<i; j++) {\n        valuesOrder[j] = valores[i];\n        if (i<13) i++;\n      }\n    }\n  }\n\n  j = 0;\n\n  for (i=0; i<13; i++) {\n    if (valuesOrder[i] === undefined) {\n      valuesOrder[i] = valores[j];\n      j++;\n    }\n  }\n\n\n\n\n  // Ordenando as pilhas de cartas com base na carta de rotação\n\n  const pile_naipe_ordenados = [];\n  const pile_values_ordenados = [];\n  \n\n  var n = 0;\n\n  // ordenando os naipes\n  for (j=0; j<4; j++) {\n    for (i=0; i<13; i++) {\n      if ( pile_naipe[i] === naipesOrder[j] ) {\n        pile_naipe_ordenados[n] = pile_naipe[i];\n        pile_values_ordenados[n] = pile_values[i];\n        n++;\n      }\n    }\n  }\n\n\n  // ordenando os valores\n  var aux;\n  for( i=0; i<n-1; i++) {\n\n    if (pile_naipe_ordenados[i] === pile_naipe_ordenados[i+1]) {\n  \n      if ( valuesOrder.indexOf(pile_values_ordenados[i])  > valuesOrder.indexOf(pile_values_ordenados[i+1]) ) {\n        \n        aux = pile_values_ordenados[i];\n        pile_values_ordenados[i] = pile_values_ordenados[i+1];\n        pile_values_ordenados[i+1] = aux;\n      }\n    }\n  }\n  \n  // imprime a string\n\n  /*\n  for (i=0; i<n; i++) {\n    console.log(i + ':' + pile_naipe_ordenados[i] + '-' + pile_values_ordenados[i] );\n  }\n  */\n\n  setPileSuitSorted(pile_naipe_ordenados);\n  setPileValueSorted(pile_values_ordenados);\n\n\n},[pileValues, pileSuit]);\n\n\n\n\n// full house combinacoes\nuseEffect(() => {\n  //console.log(pileValueSorted);\n  //console.log(pileSuitSorted);\n  \n  const inputValue = ['2', '2', '2', '2', '3', '3', '3'];\n  const inputSuit = [ 'H', 'D', 'C', 'S', 'H'];\n  \n  if (inputSuit.length >= 5) {\n    alert('oi');\n  } \n\n   \n\n},[pileValues, pileSuit]);\n\n\n\n\n\n  return (\n    <div className=\"deckid-container\">\n\n\n      <h1>Ordered Pile</h1>\n      \n      <div className=\"cards\">\n\n        <div>\n        {pileValueSorted.map(( value, index )=> (\n          <div key={index} >\n              <span>Card {index+1}:  </span>\n              <span>{value} </span>\n          </div>\n        ))}\n\n        </div>\n\n        <div>\n        {pileSuitSorted.map(( suit, index )=> (\n          <div key={index+1000}>\n              <span>&nbsp;</span>\n              <span>{suit} </span>\n          </div>\n        ))}\n        </div>\n\n      </div>\n\n\n\n      <h2>Rotation card: </h2>\n      \n\n      <h2>High card: </h2>\n      <span> {pileValueSorted[0]} {pileSuitSorted[0]} </span>\n      \n\n      <h2>Full house combination: none</h2>\n      \n    </div>\n  );\n}\n\nexport default DeckId;"]},"metadata":{},"sourceType":"module"}