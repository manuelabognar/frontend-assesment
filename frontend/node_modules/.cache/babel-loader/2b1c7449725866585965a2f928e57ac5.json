{"ast":null,"code":"var _jsxFileName = \"/home/bognar/\\xC1rea de Trabalho/t10101010/frontend-assesment/frontend/src/pages/DeckId/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles.css';\n\nfunction DeckId() {\n  const [pileSuit, setPileSuit] = useState([]);\n  const [pileValues, setPileValues] = useState([]);\n  const [pileSuitSorted, setPileSuitSorted] = useState([]);\n  const [pileValueSorted, setPileValueSorted] = useState([]);\n  const [fullHouseCombinations, setFullHouseCombinations] = useState([]);\n  useEffect(() => {\n    axios({\n      method: 'get',\n      url: `https://deckofcardsapi.com/api/deck/${localStorage.getItem('deck_id')}/draw/?count=11`\n    }).then(response => {\n      const suits = response.data.cards.map(card => card.suit);\n      setPileSuit(suits);\n      const values = response.data.cards.map(card => card.value);\n      setPileValues(values);\n    });\n  }, []);\n  useEffect(() => {\n    // input de cartas\n    const pile_naipe = pileSuit.map(card => card);\n    const pile_values = pileValues.map(card => card); // ordem proposta\n\n    const naipes = ['HEARTS', 'DIAMONTS', 'CLUBS', 'SPADES'];\n    const valores = ['2', 'ACE', 'KING', 'QUEEN', 'JACK', '10', '9', '8', '7', '6', '5', '4', '3']; // carta de rotacao\n\n    const rotationCardValor = '2';\n    const rotationCardNaipe = 'HEARTS'; // dividir as array e passar quem ta na frente da rotation card pra trás\n\n    var i = 0;\n    var j = 0; // criando nova array de naipes, com base na carta de rotacao\n\n    const naipesOrder = [];\n\n    for (i = 0; i < 4; i++) {\n      if (naipes[i] === rotationCardNaipe) {\n        for (j = 0; j < i; j++) {\n          naipesOrder[j] = naipes[i];\n          if (i < 4) i++;\n        }\n      }\n    }\n\n    j = 0;\n\n    for (i = 0; i < 4; i++) {\n      if (naipesOrder[i] === undefined) {\n        naipesOrder[i] = naipes[j];\n        j++;\n      }\n    } // criando nova array de valores, com base na carta de rotacao\n\n\n    const valuesOrder = [];\n\n    for (i = 0; i < 13; i++) {\n      if (valores[i] === rotationCardValor) {\n        for (j = 0; j < i; j++) {\n          valuesOrder[j] = valores[i];\n          if (i < 13) i++;\n        }\n      }\n    }\n\n    j = 0;\n\n    for (i = 0; i < 13; i++) {\n      if (valuesOrder[i] === undefined) {\n        valuesOrder[i] = valores[j];\n        j++;\n      }\n    } // Ordenando as pilhas de cartas com base na carta de rotação\n\n\n    const pile_naipe_ordenados = [];\n    const pile_values_ordenados = [];\n    var n = 0; // ordenando os naipes\n\n    for (j = 0; j < 4; j++) {\n      for (i = 0; i < 13; i++) {\n        if (pile_naipe[i] === naipesOrder[j]) {\n          pile_naipe_ordenados[n] = pile_naipe[i];\n          pile_values_ordenados[n] = pile_values[i];\n          n++;\n        }\n      }\n    } // ordenando os valores\n\n\n    var aux;\n\n    for (i = 0; i < n - 1; i++) {\n      if (pile_naipe_ordenados[i] === pile_naipe_ordenados[i + 1]) {\n        if (valuesOrder.indexOf(pile_values_ordenados[i]) > valuesOrder.indexOf(pile_values_ordenados[i + 1])) {\n          aux = pile_values_ordenados[i];\n          pile_values_ordenados[i] = pile_values_ordenados[i + 1];\n          pile_values_ordenados[i + 1] = aux;\n        }\n      }\n    } // imprime a string\n\n    /*\n    for (i=0; i<n; i++) {\n      console.log(i + ':' + pile_naipe_ordenados[i] + '-' + pile_values_ordenados[i] );\n    }\n    */\n\n\n    setPileSuitSorted(pile_naipe_ordenados);\n    setPileValueSorted(pile_values_ordenados);\n  }, [pileValues, pileSuit]); // full house combinacoes\n\n  useEffect(() => {\n    const inputValue = pileValueSorted.map(card => card);\n    const inputSuit = pileSuitSorted.map(card => card);\n    console.log(inputValue);\n    console.log(inputSuit);\n    const valores = [];\n    const ocorrencias = [];\n    var indexValores = 0;\n    var indexOcorrencias = 0;\n    valores[indexValores] = inputValue[0];\n    indexValores++;\n    ocorrencias[0] = 1;\n    var i;\n\n    for (i = 0; i < inputValue.length - 1; i++) {\n      if (inputValue[i] !== inputValue[i + 1]) {\n        valores[indexValores] = inputValue[i + 1];\n        indexValores++;\n        indexOcorrencias++;\n        ocorrencias[indexOcorrencias] = 1;\n      } else {\n        ocorrencias[indexOcorrencias]++;\n      }\n    } //  console.log(valores);\n    //  console.log(ocorrencias);\n\n\n    var j;\n    var k;\n    var indicesCertos = [];\n    var indexTrios = 0;\n    let trios = [[]]; // buscando pelos trios\n\n    for (i = 0; i < ocorrencias.length; i++) {\n      // salvo os trios quando tem 3 cartas de mesmo valor\n      if (ocorrencias[i] === 3) {\n        indicesCertos = [];\n        k = 0;\n\n        for (j = 0; j < inputValue.length; j++) {\n          if (inputValue[j] === valores[i]) {\n            indicesCertos[k] = j;\n            k++;\n          }\n        }\n\n        trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]], inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]], inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]]];\n        indexTrios++;\n      } // se eu tiver 4 cartas de naipes diferentes, tenho 4 combinaçoes de trios possíveis\n      // entao 'ignoro' cada um das cartas, para obter os 4 trios\n\n\n      if (ocorrencias[i] === 4) {\n        indicesCertos = [];\n        k = 0;\n\n        for (j = 0; j < inputValue.length; j++) {\n          if (inputValue[j] === valores[i]) {\n            indicesCertos[k] = j;\n            k++;\n          }\n        }\n\n        trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]], inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]], inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]]];\n        indexTrios++;\n        trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]], inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]], inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n        indexTrios++;\n        trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]], inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]], inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n        indexTrios++;\n        trios[indexTrios] = [inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]], inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]], inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n        indexTrios++;\n      }\n    } // console.log(trios);\n\n\n    let duplas = [[]];\n    var indexDuplas = 0; // buscando pelas duplas \n\n    for (var l = 0; l < inputValue.length; l++) {\n      for (var m = 1; m < inputValue.length; m++) {\n        // se l<m, pra nao voltar no vetor e ter combinacoes diferentes (a ordem nao importa) \n        // e se o valor das duas cartas fores iguais, add na matriz(x)\n        if (l < m && inputValue[l] === inputValue[m]) {\n          duplas[indexDuplas] = [inputValue[m], inputSuit[m], inputValue[l], inputSuit[l]];\n          indexDuplas++;\n        }\n      }\n    } // console.log(duplas);\n\n    /**\n     * agora precisamos juntar trios e duplas, verificando as combinações possíveis pq nada nessa vida é fácil\n     * \n     * se eu tenho um trio, nao posso ter uma dupla com aquele mesmo valor pois não temos cartas repetidas no deck\n     * entao vou concatenar as duplas nos trios de valores diferentes\n     * \n     * **/\n\n\n    let fullHouse = [[]];\n    var indexFullHouse = 0;\n\n    for (var trio = 0; trio < trios.length; trio++) {\n      for (var dupla = 0; dupla < duplas.length; dupla++) {\n        if (trios[trio][0] !== duplas[dupla][0]) {\n          fullHouse[indexFullHouse] = [trios[trio][0] + trios[trio][1], trios[trio][2] + trios[trio][3], trios[trio][4] + trios[trio][5], duplas[dupla][0] + duplas[dupla][1], +duplas[dupla][2] + duplas[dupla][3]];\n          indexFullHouse++;\n        }\n      }\n    } //console.log(fullHouse);\n\n\n    setFullHouseCombinations(fullHouse);\n  }, [pileValues, pileSuit]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"deckid-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }\n  }, \"Ordered Pile\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 9\n    }\n  }, pileValueSorted.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 15\n    }\n  }, \"Card \", index + 1, \":  \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 15\n    }\n  }, value, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }\n  }, pileSuitSorted.map((suit, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index + 1000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 15\n    }\n  }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 15\n    }\n  }, suit, \" \"))))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }\n  }, \"Rotation card: \"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }\n  }, \"High card: \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }\n  }, \" \", pileValueSorted[0], \" \", pileSuitSorted[0], \" \"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }\n  }, \"Full house combination: \"), fullHouseCombinations.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 15\n    }\n  }, \"Combination \", index + 1, \":  \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 15\n    }\n  }, value, \" \"))));\n}\n\nexport default DeckId;","map":{"version":3,"sources":["/home/bognar/Área de Trabalho/t10101010/frontend-assesment/frontend/src/pages/DeckId/index.js"],"names":["React","useState","useEffect","axios","DeckId","pileSuit","setPileSuit","pileValues","setPileValues","pileSuitSorted","setPileSuitSorted","pileValueSorted","setPileValueSorted","fullHouseCombinations","setFullHouseCombinations","method","url","localStorage","getItem","then","response","suits","data","cards","map","card","suit","values","value","pile_naipe","pile_values","naipes","valores","rotationCardValor","rotationCardNaipe","i","j","naipesOrder","undefined","valuesOrder","pile_naipe_ordenados","pile_values_ordenados","n","aux","indexOf","inputValue","inputSuit","console","log","ocorrencias","indexValores","indexOcorrencias","length","k","indicesCertos","indexTrios","trios","duplas","indexDuplas","l","m","fullHouse","indexFullHouse","trio","dupla","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport axios from 'axios';\n\nimport './styles.css';\n\nfunction DeckId() {\n\n  const [pileSuit, setPileSuit] = useState([]);\n  const [pileValues, setPileValues] = useState([]);\n  \n  const [pileSuitSorted, setPileSuitSorted] = useState([]);\n  const [pileValueSorted, setPileValueSorted] = useState([]);\n\n  const [fullHouseCombinations, setFullHouseCombinations] = useState([]);\n\n\n\n  useEffect(() => {\n    axios({\n      method: 'get',\n      url: `https://deckofcardsapi.com/api/deck/${localStorage.getItem('deck_id')}/draw/?count=11`\n    })\n    .then (response => {\n      \n      const suits = response.data.cards.map(card => card.suit);\n      setPileSuit(suits);\n\n      const values = response.data.cards.map(card => card.value);\n      setPileValues(values);\n\n    });\n  },[]);\n\n\n\n\n  useEffect(() => {\n   \n  // input de cartas\n  const pile_naipe = pileSuit.map(card => card);\n  const pile_values = pileValues.map(card => card); \n\n\n  // ordem proposta\n  const naipes = ['HEARTS', 'DIAMONTS', 'CLUBS', 'SPADES'];\n  const valores = ['2', 'ACE', 'KING', 'QUEEN', 'JACK', '10', '9', '8', '7', '6', '5', '4', '3'];\n\n\n  // carta de rotacao\n  const rotationCardValor = '2';\n  const rotationCardNaipe = 'HEARTS';\n\n  // dividir as array e passar quem ta na frente da rotation card pra trás\n  \n  var i = 0;\n  var j = 0;\n  \n\n  // criando nova array de naipes, com base na carta de rotacao\n  const naipesOrder =[];\n\n  for (i=0; i<4; i++) {\n    if (naipes[i] === rotationCardNaipe) {\n      for (j=0; j<i; j++) {\n        naipesOrder[j] = naipes[i];\n        if (i<4) i++;\n      }\n    }\n  }\n\n  j = 0;\n\n  for (i=0; i<4; i++) {\n    if (naipesOrder[i] === undefined) {\n      naipesOrder[i] = naipes[j];\n      j++;\n    }\n  }\n\n\n\n  // criando nova array de valores, com base na carta de rotacao\n  \n  const valuesOrder =[];\n\n  for (i=0; i<13; i++) {\n    if (valores[i] === rotationCardValor) {\n      for (j=0; j<i; j++) {\n        valuesOrder[j] = valores[i];\n        if (i<13) i++;\n      }\n    }\n  }\n\n  j = 0;\n\n  for (i=0; i<13; i++) {\n    if (valuesOrder[i] === undefined) {\n      valuesOrder[i] = valores[j];\n      j++;\n    }\n  }\n\n\n\n\n  // Ordenando as pilhas de cartas com base na carta de rotação\n\n  const pile_naipe_ordenados = [];\n  const pile_values_ordenados = [];\n  \n\n  var n = 0;\n\n  // ordenando os naipes\n  for (j=0; j<4; j++) {\n    for (i=0; i<13; i++) {\n      if ( pile_naipe[i] === naipesOrder[j] ) {\n        pile_naipe_ordenados[n] = pile_naipe[i];\n        pile_values_ordenados[n] = pile_values[i];\n        n++;\n      }\n    }\n  }\n\n\n  // ordenando os valores\n  var aux;\n  for( i=0; i<n-1; i++) {\n\n    if (pile_naipe_ordenados[i] === pile_naipe_ordenados[i+1]) {\n  \n      if ( valuesOrder.indexOf(pile_values_ordenados[i])  > valuesOrder.indexOf(pile_values_ordenados[i+1]) ) {\n        \n        aux = pile_values_ordenados[i];\n        pile_values_ordenados[i] = pile_values_ordenados[i+1];\n        pile_values_ordenados[i+1] = aux;\n      }\n    }\n  }\n  \n  // imprime a string\n\n  /*\n  for (i=0; i<n; i++) {\n    console.log(i + ':' + pile_naipe_ordenados[i] + '-' + pile_values_ordenados[i] );\n  }\n  */\n\n  setPileSuitSorted(pile_naipe_ordenados);\n  setPileValueSorted(pile_values_ordenados);\n\n\n},[pileValues, pileSuit]);\n\n\n\n\n// full house combinacoes\nuseEffect(() => {\n  \n  const inputValue = pileValueSorted.map(card => card);\n  const inputSuit = pileSuitSorted.map(card => card);\n\n  console.log(inputValue);\n  console.log(inputSuit);\n  \n\n  const valores = [];\n  const ocorrencias = [];\n  var indexValores = 0;\n  var indexOcorrencias = 0;\n\n  valores[indexValores] = inputValue[0];\n  indexValores++;\n\n  ocorrencias[0] = 1;\n\n  var i;\n\n  for ( i=0; i<inputValue.length-1; i++) {\n    if (inputValue[i] !== inputValue[i+1]) {\n      valores[indexValores] = inputValue[i+1];\n      indexValores++;\n      indexOcorrencias++\n      ocorrencias[indexOcorrencias] = 1;\n    } else {\n      ocorrencias[indexOcorrencias]++;\n    }\n  }\n\n//  console.log(valores);\n//  console.log(ocorrencias);\n  \n\n  var j;\n  var k;\n  var indicesCertos = [];\n      \n\n  var indexTrios = 0;\n  let trios = [[]];\n\n\n  // buscando pelos trios\n  for ( i=0; i<ocorrencias.length; i++) {\n    \n    // salvo os trios quando tem 3 cartas de mesmo valor\n    if(ocorrencias[i] === 3){\n    \n      indicesCertos = [];\n      k=0;\n      \n      for ( j=0; j<inputValue.length; j++ ) {\n        if ( inputValue[j] === valores[i] ) {\n\n          indicesCertos[k] = j;\n          k++;\n        }\n      }\n      \n      trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]],\n                           inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]],\n                           inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]]];\n      indexTrios++;\n      \n    }\n\n\n    // se eu tiver 4 cartas de naipes diferentes, tenho 4 combinaçoes de trios possíveis\n    // entao 'ignoro' cada um das cartas, para obter os 4 trios\n\n    if(ocorrencias[i] === 4){\n      \n      indicesCertos = [];\n      k=0;\n      \n      for ( j=0; j<inputValue.length; j++ ) {\n        if ( inputValue[j] === valores[i] ) {\n\n          indicesCertos[k] = j;\n          k++;\n        }\n      }  \n\n      \n      trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]],\n                           inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]],\n                           inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]]];\n      indexTrios++ ;\n      \n      trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]],\n                           inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]],\n                           inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n      indexTrios++ ;\n      \n      trios[indexTrios] = [inputValue[indicesCertos[0]], inputSuit[indicesCertos[0]],\n                           inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]],\n                           inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n      indexTrios++ ;\n      \n      trios[indexTrios] = [inputValue[indicesCertos[1]], inputSuit[indicesCertos[1]],\n                           inputValue[indicesCertos[2]], inputSuit[indicesCertos[2]],\n                           inputValue[indicesCertos[3]], inputSuit[indicesCertos[3]]];\n      indexTrios++;\n\n    }\n  }\n\n // console.log(trios);\n\n\n  let duplas = [[]];\n  var indexDuplas = 0;\n\n\n  // buscando pelas duplas \n  for (var l = 0; l<inputValue.length; l++) {       \n    for (var m = 1; m<(inputValue.length); m++) {  \n      \n        // se l<m, pra nao voltar no vetor e ter combinacoes diferentes (a ordem nao importa) \n        // e se o valor das duas cartas fores iguais, add na matriz(x)\n        if ( ( l<m ) && ( inputValue[l] === inputValue[m] ) ) {\n          \n          duplas[indexDuplas] = [ inputValue[m],inputSuit[m] , inputValue[l],inputSuit[l] ];\n          indexDuplas++;\n              \n      }      \n    }\n  }\n\n // console.log(duplas);\n\n/**\n * agora precisamos juntar trios e duplas, verificando as combinações possíveis pq nada nessa vida é fácil\n * \n * se eu tenho um trio, nao posso ter uma dupla com aquele mesmo valor pois não temos cartas repetidas no deck\n * entao vou concatenar as duplas nos trios de valores diferentes\n * \n * **/\n\n\n  let fullHouse = [[]];\n  var indexFullHouse = 0;\n\n\n  for (var trio = 0; trio<trios.length; trio++) {\n\n    for (var dupla = 0; dupla<duplas.length; dupla++) {\n      \n      if ( trios[trio][0] !== duplas[dupla][0] ) {\n        \n        fullHouse[indexFullHouse] = [ trios[trio][0]+trios[trio][1], trios[trio][2]+trios[trio][3], trios[trio][4]+trios[trio][5], \n                                      duplas[dupla][0]+duplas[dupla][1], + duplas[dupla][2]+duplas[dupla][3] ];\n\n        indexFullHouse++;\n\n      }\n    \n    }\n\n  }\n\n//console.log(fullHouse);\nsetFullHouseCombinations(fullHouse);\n\n   \n\n},[pileValues, pileSuit]);\n\n\n\n  return (\n    <div className=\"deckid-container\">\n\n\n      <h1>Ordered Pile</h1>\n      \n      <div className=\"cards\">\n\n        <div>\n        {pileValueSorted.map(( value, index )=> (\n          <div key={index} >\n              <span>Card {index+1}:  </span>\n              <span>{value} </span>\n          </div>\n        ))}\n\n        </div>\n\n        <div>\n        {pileSuitSorted.map(( suit, index )=> (\n          <div key={index+1000}>\n              <span>&nbsp;</span>\n              <span>{suit} </span>\n          </div>\n        ))}\n        </div>\n\n      </div>\n\n\n\n      <h2>Rotation card: </h2>\n      \n\n      <h2>High card: </h2>\n      <span> {pileValueSorted[0]} {pileSuitSorted[0]} </span>\n      \n\n      <h2>Full house combination: </h2>\n      {fullHouseCombinations.map(( value, index )=> (\n          <div key={index} >\n              <span>Combination {index+1}:  </span>\n              <span>{value} </span>\n          </div>\n        ))}\n      \n    </div>\n  );\n}\n\nexport default DeckId;"]},"metadata":{},"sourceType":"module"}